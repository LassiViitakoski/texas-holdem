// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generator erd {
//  provider    = "prisma-erd-generator"
//  output      = "./diagram.svg"
//  ignoreEnums = true
//  theme       = "forest"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String
  email     String    @unique
  phone     String?
  role      UserRole  @default(BASIC)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")

  accounts  Account[]
  players   Player[]

  @@map("user")
}

model Player {
  id        Int           @id @default(autoincrement())
  stack     Decimal       
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @updatedAt @map("updated_at")

  user      User          @relation(fields: [userId], references: [id])
  game      Game          @relation(fields: [gameId], references: [id])
  userId    Int           @map("user_id")
  gameId    Int           @map("game_id")
  
  rounds    RoundPlayer[]
  tablePosition TablePosition[]

  @@map("player")
}

model Account {
  id        Int      @id @default(autoincrement())
  balance   Decimal  @default(0.00)
  currency  Currency
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  @@map("account")
}

model Game {
  id             Int             @id @default(autoincrement())
  minimumPlayers Int             @default(2) @map("minimum_players")
  maximumPlayers Int             @map("maximum_players")
  chipUnit       ChipUnit        @map("chip_unit")
  rake           Decimal
  status         GameStatus?
  isInactive     Boolean         @default(false) @map("is_inactive")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @default(now()) @updatedAt @map("updated_at")

  blinds         Blind[]
  players        Player[]
  rounds         Round[]
  tablePositions TablePosition[]

  @@map("game")
}

model Blind {
  id          Int      @id @default(autoincrement())
  position    Int          
  amount      Decimal
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  games       Game[]

  @@map("blind")
}

model Round {
  id              Int           @id @default(autoincrement())
  pot             Decimal
  isFinished      Boolean       @default(false) @map("is_finished")
  communityCards  String[]      @map("community_cards") // Store as ["Ad", "10c", "Kh"]
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @default(now()) @updatedAt @map("updated_at")

  game            Game          @relation(fields: [gameId], references: [id])
  gameId          Int           @map("game_id")

  roundPlayers    RoundPlayer[]
  bettingRounds   BettingRound[]

  @@map("round")
}

model RoundPlayer {
  id                      Int                   @id @default(autoincrement())
  position                Int
  initialStack            Decimal               @map("initial_stack")
  isWinner                Boolean               @default(false) @map("is_winner")
  cards                   String[]              // Store as ["Ad", "10c"]
  createdAt               DateTime              @default(now()) @map("created_at")
  updatedAt               DateTime              @default(now()) @updatedAt @map("updated_at")

  player                  Player                @relation(fields: [playerId], references: [id])
  round                   Round                 @relation(fields: [roundId], references: [id])
  playerId                Int                   @map("player_id")
  roundId                 Int                   @map("round_id")

  bettingRounds           BettingRoundPlayer[]

  @@map("round_player")
}

model BettingRound {
  id          Int                   @id @default(autoincrement())
  type        RoundPhase
  isFinished  Boolean               @default(false) @map("is_finished")
  createdAt   DateTime              @default(now()) @map("created_at")
  updatedAt   DateTime              @default(now()) @updatedAt @map("updated_at")
  
  round       Round                 @relation(fields: [roundId], references: [id])
  roundId     Int                   @map("round_id")
  
  players     BettingRoundPlayer[]
  actions     BettingRoundAction[]

  @@map("betting_round")
}

model BettingRoundPlayer {
  id              Int                     @id @default(autoincrement())
  position        Int                     
  createdAt       DateTime                @default(now()) @map("created_at")
  updatedAt       DateTime                @default(now()) @updatedAt @map("updated_at")

  bettingRound    BettingRound            @relation(fields: [bettingRoundId], references: [id])
  bettingRoundId  Int                     @map("betting_round_id")

  roundPlayer     RoundPlayer             @relation(fields: [roundPlayerId], references: [id])
  roundPlayerId   Int                     @map("round_player_id")

  actions         BettingRoundAction[]

  @@map("betting_round_player")
}

model BettingRoundAction {
  id              Int                           @id @default(autoincrement())
  sequence        Int                     
  type            PokerAction
  amount          Decimal                       @default(0.00) @map("amount")
  createdAt       DateTime                      @default(now()) @map("created_at")
  updatedAt       DateTime                      @default(now()) @updatedAt @map("updated_at")
  
  bettingRound    BettingRound                  @relation(fields: [bettingRoundId], references: [id])
  bettingRoundId  Int                           @map("betting_round_id")

  bettingRoundPlayer    BettingRoundPlayer      @relation(fields: [bettingRoundPlayerId], references: [id])
  bettingRoundPlayerId  Int                     @map("betting_round_player_id")

  @@map("betting_round_action")
}

model TablePosition {
  id        Int      @id @default(autoincrement())
  position  Int      // 1-based position number
  isActive  Boolean  @default(false)
  isDealer  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  game      Game     @relation(fields: [gameId], references: [id])
  gameId    Int      @map("game_id")
  player    Player?   @relation(fields: [playerId], references: [id])
  playerId  Int?      @map("player_id")

  @@unique([gameId, position])  // Ensure no duplicate positions at same table
  @@unique([gameId, playerId])  // Ensure player can't sit in multiple positions
  @@map("table_position")
}

enum Currency {
  EUR
  SEK
  GDP
  USD

  @@map("CURRENCY")
}

enum UserRole {s
  BASIC
  ADMIN

  @@map("USER_ROLE")
}

enum ChipUnit {
  CASH
  CHIP

  @@map("CHIP_UNIT")
}

// Figure out if we need to have a status for when the game or is isinactive 
enum GameStatus {
  ROUND_IN_PROGRESS
  WAITING

  @@map("GAME_STATUS")
}

enum RoundPhase {
  PREFLOP
  FLOP
  TURN
  RIVER

  @@map("ROUND_PHASE")
}

enum PokerAction {
  BLIND
  CALL
  CHECK
  FOLD
  RAISE

  @@map("POKER_ACTION")
}