{
  "version": 3,
  "sources": ["../src/database-api.ts", "../src/add.ts", "../src/index.ts"],
  "sourcesContent": ["/*\r\nimport { PrismaClient } from '@prisma/client';\r\nimport { UserRepository } from './repositories';\r\n\r\ntype PrismaLogType = 'info' | 'query' | 'warn' | 'error';\r\n\r\ntype DatabaseApiConstructor = {\r\n    datasourceUrl?: string;\r\n    log?: PrismaLogType[];\r\n};\r\n\r\nclass DatabaseApi {\r\n    private static instance: DatabaseApi;\r\n\r\n    private readonly client: PrismaClient;\r\n\r\n    public user: UserRepository;\r\n\r\n    constructor(params: DatabaseApiConstructor = {}) {\r\n        this.client = new PrismaClient(params);\r\n\r\n        this.user = new UserRepository(this.client);\r\n    }\r\n\r\n    public static getInstance(params: DatabaseApiConstructor) {\r\n        if (!this.instance) {\r\n            this.instance = new DatabaseApi(params);\r\n        }\r\n\r\n        return this.instance;\r\n    }\r\n}\r\n\r\nexport { DatabaseApi };\r\n*/\r\n\r\nexport class DatabaseApi {\r\n    private readonly param: string;\r\n\r\n    constructor(param: string) {\r\n        this.param = param;\r\n    }\r\n\r\n    public test() {\r\n        console.log(`Test function param: ${this.param}`);\r\n    }\r\n}\r\n", "export const add = (a: number, b: number): number => a + b;\n", "import { DatabaseApi } from './database-api';\r\nimport { add } from './add';\r\n\r\n/* const api = DatabaseApi.getInstance({}) */\r\n\r\nexport default { DatabaseApi, add };\r\nexport { DatabaseApi, add };\r\n"],
  "mappings": ";AAoCO,IAAM,cAAN,MAAkB;AAAA,EACJ;AAAA,EAEjB,YAAY,OAAe;AACvB,SAAK,QAAQ;AAAA,EACjB;AAAA,EAEO,OAAO;AACV,YAAQ,IAAI,wBAAwB,KAAK,KAAK,EAAE;AAAA,EACpD;AACJ;;;AC9CO,IAAM,MAAM,CAAC,GAAW,MAAsB,IAAI;;;ACKzD,IAAO,cAAQ,EAAE,aAAa,IAAI;",
  "names": []
}
